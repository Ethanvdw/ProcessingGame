/* autogenerated by Processing revision 1293 on 2024-03-30 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.ArrayList;
import java.util.List;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ProcessingGame extends PApplet {

/**
 * The ProcessingGame class represents a game that simulates the behavior of multiple flocks of boids.
 * Each flock consists of a group of boids that exhibit flocking behavior.
 * The game window has a size of 800x800 pixels and is titled "Flock Off".
 * The game initializes with 5 flocks, each containing 100 boids.
 * The background color of the game window is set to a dark gray (RGB: 50, 50, 50).
 * The number of boids in the first flock is displayed in the top left corner of the window.
 * The total number of boids in all flocks, excluding the first flock, is displayed in the top right corner of the window.
 * The color of each flock is randomly generated.
 */



Flock[] flocks;
final int N_FLOCKS = 5;
final int BOIDS = 10;

/**
 * Delay the collision detection for a certain number of frames.
 * Gives them time to spread out before they start colliding.
 **/
int delayFrames = 180;
int currentFrame = 0;

/**
 * The setup function is called once when the program starts.
 * It sets up the size of the canvas, the title of the window,
 * initializes the counter, and creates the flocks.
 **/
public void setup() {
    frameRate(80);
    /* size commented out by preprocessor */;
    surface.setTitle("Flock Off");
    setupCounter();
    flocks = IntStream.range(0, N_FLOCKS)
                      .mapToObj(i -> new Flock(generateRandomColor(), BOIDS, i == 0))
                      .toArray(Flock[]::new);


                          // Add an extra boid to the player's flock, for testing purposes
    Boid extraBoid = new PlayerControlledBoid(width / 2, height / 2, flocks[0]);
    flocks[0].addBoid(extraBoid);
}

/**
 * The draw function is called repeatedly in a loop.
 * It clears the background, runs the flock simulation,
 * and renders the counters for the number of boids in each flock.
 */
public void draw() {
    background(50);
    Arrays.stream(flocks).forEach(Flock::run);

    if (currentFrame >= delayFrames) {
        for (Flock flock : flocks) {
            List<Boid> boidsSnapshot = new ArrayList<>(flock.getBoids());
            for (Boid boid : boidsSnapshot) {
                boid.checkFlockCollision(flocks);
            }
        }
    }

    renderCounter(flocks[0].getBoids().size(), 20, height - 20); // Player's flock
    int sum = Arrays.stream(flocks, 1, N_FLOCKS)
                    .mapToInt(flock -> flock.getBoids().size())
                    .sum();
    renderCounter(sum, width - 40, height - 20); // All other flocks

    println(frameRate);

    
    currentFrame++; // Increment the frame counter
}

/**
 * Generates a random color.
 * @return The randomly generated color.
 */
public int generateRandomColor() {
    return color(random(255), random(255), random(255));
}
class Boid {
    private PVector position;
    protected PVector velocity;
    protected PVector acceleration;
    private final float radius;
    private final float maxForce;
    private final float maxSpeed;
    Flock flock;
    private int flockColor;
    
    
    Boid(float x, float y, Flock flock) {
        acceleration = new PVector(0, 0);
        float angle = random(TWO_PI);
        velocity = new PVector(cos(angle), sin(angle));
        position = new PVector(x, y);
        radius = 2.0f;
        maxSpeed = 2.0f;
        maxForce = 0.03f;
        this.flock = flock;
        this.flockColor = flock.flockColor;
    }
    
    public void run(ArrayList<Boid> boids) {
        flock(boids);
        
        updatePosition();
        wrapAroundBorders();
        render();
    }
    
    protected void applyForce(PVector force) {
        acceleration.add(force);
    }
    
    private void flock(ArrayList<Boid> boids) {
        PVector separationForce = getSeparationForce(boids);
        PVector alignmentForce = getAlignmentForce(boids);
        PVector cohesionForce = getCohesionForce(boids);
        
        separationForce.mult(1.5f);
        alignmentForce.mult(1.0f);
        cohesionForce.mult(1.0f);
        
        applyForce(separationForce);
        applyForce(alignmentForce);
        applyForce(cohesionForce);
    }
    
    protected void updatePosition() {
        velocity.add(acceleration);
        velocity.limit(maxSpeed);
        position.add(velocity);
        acceleration.mult(0);
    }
    
    protected PVector seekTarget(PVector target) {
        PVector desired = PVector.sub(target, position);
        desired.normalize();
        desired.mult(maxSpeed);
        PVector steer = PVector.sub(desired, velocity);
        steer.limit(maxForce);
        return steer;
    }
    
    protected void render() {
        float theta = velocity.heading2D() + radians(90);
        fill(flockColor);
        stroke(255);
        pushMatrix();
        translate(position.x, position.y);
        rotate(theta);
        renderBoidShape();
        popMatrix();
    }
    
    private void renderBoidShape() {
        beginShape(TRIANGLES);
        vertex(0, -radius * 2);
        vertex( -radius, radius * 2);
        vertex(radius, radius * 2);
        endShape();
    }
    
    protected void wrapAroundBorders() {
        if (position.x < - radius) position.x = width + radius;
        if (position.y < - radius) position.y = height + radius;
        if (position.x > width + radius) position.x = -radius;
        if (position.y > height + radius) position.y = -radius;
    }
    
    protected PVector getSeparationForce(ArrayList<Boid> boids) {
        float desiredSeparation = 25.0f;
        PVector steer = new PVector(0, 0);
        int count = 0;
        
        for (Boid other : boids) {
            float distance = PVector.dist(position, other.position);
            if (distance > 0 && distance < desiredSeparation) {
                PVector diff = PVector.sub(position, other.position);
                diff.normalize();
                diff.div(distance);
                steer.add(diff);
                count++;
            }
        }
        
        if (count > 0) {
            steer.div(count);
            steer.setMag(maxSpeed);
            steer.sub(velocity);
            steer.limit(maxForce);
        }
        
        return steer;
    }
    
    protected PVector getAlignmentForce(ArrayList<Boid> boids) {
        float neighborDistance = 50.0f;
        PVector sum = new PVector(0, 0);
        int count = 0;
        
        for (Boid other : boids) {
            float distance = PVector.dist(position, other.position);
            if (distance > 0 && distance < neighborDistance) {
                sum.add(other.velocity);
                count++;
            }
        }
        
        if (count > 0) {
            sum.div(count);
            sum.setMag(maxSpeed);
            PVector steer = PVector.sub(sum, velocity);
            steer.limit(maxForce);
            return steer;
        } else {
            return new PVector(0, 0);
        }
    }
    
    protected PVector getCohesionForce(ArrayList<Boid> boids) {
        float neighborDistance = 50.0f;
        PVector sum = new PVector(0, 0);
        int count = 0;
        
        for (Boid other : boids) {
            float distance = PVector.dist(position, other.position);
            if (distance > 0 && distance < neighborDistance) {
                sum.add(other.position);
                count++;
            }
        }
        
        if (count > 0) {
            sum.div(count);
            return seekTarget(sum);
        } else {
            return new PVector(0, 0);
        }
    }
    
    protected void checkFlockCollision(Flock[] flocks) {
        Flock currentFlock = this.flock;
        Flock playerFlock = flocks[0]; // The player's flock is the first flock (index 0)
        
        // Skip collision check if the boid belongs to the player's flock
        if (currentFlock == playerFlock) {
            return;
        }
        
        PVector playerFlockCenter = getLargestFlockCenter(playerFlock);
        float distance = PVector.dist(position, playerFlockCenter);
        float collisionThreshold = 50.0f; // Adjust this value as needed
        
        if (distance < collisionThreshold) {
            currentFlock.getBoids().remove(this);
            
            // If the boid is joining the player's flock, create a PlayerControlledBoid instance
            if (playerFlock == flocks[0]) {
                PlayerControlledBoid newBoid = new PlayerControlledBoid(position.x, position.y, playerFlock);
                newBoid.velocity = this.velocity;
                newBoid.acceleration = this.acceleration;
                playerFlock.addBoid(newBoid);
            } else {
                // If joining another flock, add the original Boid instance
                playerFlock.addBoid(this);
                this.flock = playerFlock;
                this.flockColor = playerFlock.flockColor;
            }
        }
    }
    
    private PVector getLargestFlockCenter(Flock flock) {
        PVector center = new PVector(0, 0);
        List<Boid> boids = flock.getBoids();
        for (Boid boid : boids) {
            center.add(boid.position);
        }
        center.div(boids.size());
        return center;
    }
}
PFont customFont;

public void setupCounter() {
    customFont = createFont("Kenney Bold.ttf", 12);
}

public void renderCounter(int value, float x, float y) {
    textFont(customFont);
    textAlign(LEFT, CENTER);
    fill(255);
    text(value, x, y);
}



class Flock {
    private final List<Boid> boids;
    private final int flockColor;

    Flock(int flockColor, int numBoids, boolean isPlayerControlled) {
        boids = new ArrayList<>();
        this.flockColor = flockColor;
        initializeBoids(numBoids, isPlayerControlled);
    }

    public void initializeBoids(int numBoids, boolean isPlayerControlled) {
        for (int i = 0; i < numBoids; i++) {
            if (isPlayerControlled) {
                boids.add(new PlayerControlledBoid(width / 2, height / 2, this));
            } else {
                boids.add(new Boid(width / 2, height / 2, this));
            }
        }
    }

    public void run() {
        ArrayList<Boid> boidsArrayList = new ArrayList<>(boids);
        boids.forEach(boid -> boid.run(boidsArrayList));
    }

    public void addBoid(Boid boid) {
        boids.add(boid);
    }

    public List<Boid> getBoids() {
        return boids;
    }
}
class PlayerControlledBoid extends Boid {
    PlayerControlledBoid(float x, float y, Flock flock) {
        super(x, y, flock);
    }
    
    @Override public 
    void run(ArrayList<Boid> boids) {
        PVector mousePosition = getMousePosition();
        PVector steeringForce = getSteeringForce(boids, mousePosition);
        applyForce(steeringForce); 
        updatePosition();
        wrapAroundBorders();
        render();
    }
    
    private PVector getMousePosition() {
        if (isMouseOnScreen()) {
            return new PVector(mouseX, mouseY);
        }
        return null;
    }
    
    private boolean isMouseOnScreen() {
        return mouseX >= 0 && mouseX < width && mouseY >= 0 && mouseY < height;
    }
    
    private PVector getSteeringForce(ArrayList<Boid> boids, PVector mousePosition) {
        PVector steeringForce = new PVector(0, 0);
        
        if (mousePosition != null) {
            steeringForce = seekTarget(mousePosition);
        } else {
            steeringForce = getFlockingForce(boids);
        }
        
        PVector separationForce = getSeparationForce(boids);
        separationForce.mult(1.5f);
        steeringForce.add(separationForce);
        
        return steeringForce;
    }
    
    private PVector getFlockingForce(ArrayList<Boid> boids) {
        PVector alignmentForce = getAlignmentForce(boids);
        PVector cohesionForce = getCohesionForce(boids);
        alignmentForce.mult(1.0f);
        cohesionForce.mult(1.0f);
        
        PVector flockingForce = new PVector();
        flockingForce.add(alignmentForce);
        flockingForce.add(cohesionForce);
        
        return flockingForce;
    }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ProcessingGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
